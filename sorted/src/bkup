extern crate proc_macro;
//use proc_macro2::TokenStream as TokenStream2;

use proc_macro::TokenStream;
use proc_macro2::Span;
use quote::quote;
use syn::visit_mut::VisitMut;
use syn::{parse_macro_input, visit_mut};

#[proc_macro_attribute]
pub fn sorted(_attr: TokenStream, item: TokenStream) -> TokenStream {
    let mut out = item.clone();
    let input_stream: syn::Item = parse_macro_input!(item as syn::Item);
    if let Err(e) = sorted_impl::<(), syn::Error>(&input_stream) {
        out.extend(TokenStream::from(e.to_compile_error()));
    }
    out
}

fn sorted_impl<T, E>(input: &syn::Item) -> syn::Result<()> {
    match input {
        syn::Item::Enum(is_enum) => {
            if !is_enum.variants.is_empty() {
                let mut sorted: Vec<String> = Vec::with_capacity(is_enum.variants.len());
                for variant in is_enum.variants.iter() {
                    let name = variant.ident.to_string();
                    if sorted
                        .last()
                        .map(|last_item| &name < last_item)
                        .unwrap_or(false)
                    {
                        let should_be = sorted
                            .binary_search(&name)
                            .expect_err("Failed to find binary search value in sorted impl.");
                        return Err(syn::Error::new(
                            variant.ident.span(),
                            format!("{} should sort before {}", name, sorted[should_be]),
                        ));
                    }
                    sorted.push(name);
                }
            }
            return Ok(());
        }
        _ => Err(syn::Error::new(
            Span::call_site(),
            "expected enum or match expression",
        )),
    }
}

#[proc_macro_attribute]
pub fn check(_attr: TokenStream, item: TokenStream) -> TokenStream {
    //    LexicographicMatch.visit_item_fn_mut(&mut stream);

    let mut stream: syn::ItemFn = parse_macro_input!(item as syn::ItemFn);
    let mut lm = LexicographicMatch::default();
    lm.visit_item_fn_mut(&mut stream);
    let mut out = quote! { #stream };
    out.extend(lm.errors.into_iter().map(|err| err.into_compile_error()));
    out.into()
}

#[derive(Default)]
struct LexicographicMatch {
    errors: Vec<syn::Error>,
}

impl visit_mut::VisitMut for LexicographicMatch {
    fn visit_expr_match_mut(&mut self, node: &mut syn::ExprMatch) {
        if node.attrs.iter().any(|expr| expr.path().is_ident("sorted")) {
            node.attrs.retain(|expr| !expr.path().is_ident("sorted"));
            let mut variant_names: Vec<String> = Vec::with_capacity(node.attrs.len());
            for arm in node.arms.iter() {
                let name = get_arm_name(&arm.pat).expect("Failed to get arm name in VisitMut.");
                if variant_names
                    .last()
                    .map(|last_item| &name.0 < last_item)
                    .unwrap_or(false)
                {
                    let should_be = variant_names
                        .binary_search(&name.0)
                        .expect_err("Failed to find binary search value in visit_expr_match_mut.");
                    self.errors.push(syn::Error::new(
                        name.1,
                        format!("{} should sort before {}", name.0, variant_names[should_be]),
                    ));
                }
                variant_names.push(name.0);
            }
        }
        visit_mut::visit_expr_match_mut(self, node);
    }
}

fn get_arm_name(arm: &syn::Pat) -> Option<(String, Span)> {
    match arm {
        syn::Pat::Ident(syn::PatIdent {
            subpat: Some((_, ref sp)),
            ..
        }) => get_arm_name(sp),
        syn::Pat::Struct(pat_struct) => {
            let ident = pat_struct.path.get_ident().expect("");
            Some((ident.to_string(), ident.span()))
        }
        syn::Pat::TupleStruct(pat_tpl_struct) => {
            let ident = pat_tpl_struct.path.get_ident().expect("");
            Some((ident.to_string(), ident.span()))
        }
        _ => None,
    }
}
